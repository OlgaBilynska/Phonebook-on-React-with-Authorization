{"version":3,"file":"static/js/42.bbfb22cf.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contactSelectors.js","components/ContactForm/ContactForm.jsx","components/Contacts/Contact/Contact.styled.js","components/Contacts/Contact/Contact.jsx","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App/App.styled.js","pages/ContactPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { Button } from 'components/Button/Button';\n\nexport const FormWrapper = styled(Form)`\n  margin-top: 30px;\n`;\n\nexport const ButtonBigger = styled(Button)`\n  font-size: 20px;\n  padding: 10px 20px;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Label = styled.label`\n  color: var(--section);\n\n  &:hover,\n  &:focus {\n    color: var(--accent);\n  }\n`;\n\nexport const ErrorMessageForm = styled(ErrorMessage)`\n  color: var(--accent);\n  font-weight: 600;\n  background-color: var(--section);\n  border-radius: 20px;\n  padding: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const FieldForm = styled(Field)`\n  display: block;\n  width: inherit;\n  margin-bottom: 10px;\n  margin-top: 7px;\n  margin-right: auto;\n  margin-left: auto;\n  font-size: 20px;\n  color: var(--text);\n  border: var(--text);\n  background-color: var(--section);\n  outline: transparent;\n  border-radius: 20px;\n  padding: 10px 20px;\n\n  &:hover,\n  &:focus {\n    outline: 2px solid var(--accent);\n    box-shadow: 1px 1px 1px var(--accent);\n  }\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  FormWrapper,\n  ButtonBigger,\n  Label,\n  ErrorMessageForm,\n  FieldForm,\n} from './ContactForm.styled';\nimport { contactOperations } from 'redux/contacts';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst schema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nconst ContactForm = () => {\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(contactOperations.addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormWrapper>\n        <Label htmlFor={inputNameId}>\n          Name\n          <FieldForm\n            name=\"name\"\n            id={inputNameId}\n            type=\"text\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessageForm name=\"name\" component=\"div\" />\n        </Label>\n\n        <Label htmlFor={inputNumberId}>\n          Number\n          <FieldForm\n            name=\"number\"\n            id={inputNumberId}\n            type=\"tel\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessageForm name=\"number\" component=\"div\" />\n        </Label>\n\n        <ButtonBigger type=\"submit\">Add contact</ButtonBigger>\n      </FormWrapper>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.div`\n  color: var(--text);\n  font-weight: 600;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ContactContainer = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: inherit;\n  background-color: var(--section);\n  border: 1px solid var(--section);\n  border-radius: 20px;\n  padding: 10px 20px;\n  min-width: fit-content;\n`;\n","import React from 'react';\nimport { ContactItem, ContactContainer } from './Contact.styled';\nimport { Button } from 'components/Button/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactOperations, contactSelectors } from 'redux/contacts';\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (filter) {\n    const filterNorm = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterNorm)\n    );\n    return filteredContacts;\n  }\n  return contacts;\n};\n\nconst Contact = () => {\n  const contacts = useSelector(contactSelectors.getContacts);\n  const filter = useSelector(contactSelectors.getFilter);\n  const dispatch = useDispatch();\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  return visibleContacts.map(({ id, name, number }) => {\n    return (\n      <ContactContainer key={id}>\n        <ContactItem>\n          {name} : {number}\n        </ContactItem>\n        <Button\n          type=\"button\"\n          onClick={() => dispatch(contactOperations.deleteContact(id))}\n        >\n          Delete\n        </Button>\n      </ContactContainer>\n    );\n  });\n};\n\nexport default Contact;\n","import styled from '@emotion/styled';\n\nexport const ContactList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import React from 'react';\nimport Contact from './Contact/Contact';\nimport { ContactList } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <ContactList>\n      <Contact />\n    </ContactList>\n  );\n};\n\nexport default Contacts;\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  margin: 10px 0 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  color: var(--section);\n\n  &:hover,\n  &:focus {\n    color: var(--accent);\n  }\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: inherit;\n  margin: 0 auto;\n\n  margin-top: 10px;\n  color: var(--text);\n  font-weight: 600;\n  outline: transparent;\n  border: var(--text);\n  border-radius: 20px;\n  padding: 10px 20px;\n  background-color: var(--section);\n\n  &:hover,\n  &:focus {\n    outline: 2px solid var(--accent);\n    box-shadow: 1px 1px 1px var(--accent);\n  }\n`;\n","import React from 'react';\nimport { FilterLabel, FilterInput, FilterContainer } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactSelectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { useState } from 'react';\n\nconst Filter = () => {\n  const valueFilter = useSelector(getFilter);\n  const [filter, setFilter] = useState(valueFilter ?? '');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const filteredValue = e.currentTarget.value;\n    setFilter(filteredValue);\n    dispatch(setFilterValue(filteredValue));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput type=\"text\" value={filter} onChange={handleChange} />\n      </FilterLabel>\n    </FilterContainer>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const PhonebookTitle = styled.h2`\n  text-align: center;\n  font-size: 30px;\n  padding: 20px;\n  border: 1px solid var(--section);\n  border-radius: 20px;\n  background-color: var(--section);\n  color: var(--text);\n  min-width: fit-content;\n`;\n\nexport const ContactTitle = styled.h2`\n  text-align: center;\n  padding: 20px;\n  font-size: 30px;\n  border: 1px solid var(--section);\n  border-radius: 20px;\n  background-color: var(--section);\n  color: var(--text);\n  min-width: fit-content;\n`;\n\nexport const ContactTotal = styled.p`\n  margin-top: 20px;\n  display: inline-block;\n  text-align: center;\n  font-weight: 700;\n  padding: 20px;\n  border: 1px solid var(--section);\n  border-radius: 20px;\n  background-color: var(--section);\n  color: var(--text);\n`;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Contacts from 'components/Contacts/Contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getIsLoading } from 'redux/contacts/contactSelectors';\nimport { fetchContacts } from 'redux/contacts/contactOperations';\nimport { useEffect } from 'react';\nimport Filter from 'components/Filter/Filter';\nimport { ContactTotal } from 'components/App/App.styled';\n\nexport default function ContactPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      {isLoading && <p>Request in progress...</p>}\n      <Filter />\n      <Contacts />\n      <ContactTotal>Number of contacts: {contacts.length}</ContactTotal>\n    </HelmetProvider>\n  );\n}\n"],"names":["FormWrapper","styled","Form","ButtonBigger","Button","Label","ErrorMessageForm","ErrorMessage","FieldForm","Field","getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","schema","Yup","matches","required","inputNameId","nanoid","inputNumberId","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","contactOperations","addContact","htmlFor","id","type","title","component","ContactItem","ContactContainer","useSelector","contactSelectors","visibleContacts","filterNorm","toLowerCase","contact","includes","getVisibleContacts","map","onClick","deleteContact","ContactList","FilterContainer","FilterLabel","FilterInput","valueFilter","useState","setFilter","value","onChange","e","filteredValue","currentTarget","setFilterValue","ContactTotal","ContactPage","useEffect","fetchContacts","length"],"sourceRoot":""}